{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\"; //Could use this data to create a \"users near you have save said they have X soil type\" response ******\n\nexport let WildlifeAnswers = /*#__PURE__*/(() => {\n  class WildlifeAnswers {\n    constructor() {\n      this.updatedAnswers = new Subject();\n    }\n\n    getAnswerUpdateListener() {\n      return this.updatedAnswers.asObservable();\n    }\n\n    addAnswerSet(soilAnswer, phAnswer, shadeAnswer, sizeAnswer, childFriendlyAnswer, cheapAnswer, easyAnswer, rentingAnswer, pavedGardensAnswer) {\n      const ourAnswer = {\n        soil: this.getSoilString(soilAnswer),\n        ph: this.getPHString(phAnswer),\n        shade: this.getShadinessString(shadeAnswer),\n        gardenSize: this.getGardenSizeString(sizeAnswer),\n        childFriendly: childFriendlyAnswer,\n        cheap: cheapAnswer,\n        easy: easyAnswer,\n        renting: rentingAnswer,\n        pavedGardens: pavedGardensAnswer\n      }; //This is the equivalent of .emit- it sets a copy of the posts after they have been updated\n      //The three methods that can be called on our observable are .next(), .error() and .complete()\n\n      this.updatedAnswers.next(ourAnswer);\n    } //convert the answers from the multichoice to the form we need them in to search our database\n    //******** this currently converts the answers to a database form and then in disaply-user-response it converts them\n    //back again. This is an obvious thing to change.\n    //If a user inputs 'I don't know' just give them medium as this is most likely to be correct. If we have more\n    //time at any point, it would be better to give them ALL soil options rather than making a choice for them. *********\n\n\n    getSoilString(soil) {\n      if (soil == \"Light Soil\") {\n        return \"SoilLight\";\n      } else if (soil == \"Medium-Weight Soil\") {\n        return \"SoilMedium\";\n      } else if (soil == \"I Don't Know\") {\n        return \"SoilMedium\";\n      } else {\n        return \"SoilHeavy\";\n      }\n    }\n\n    getPHString(PH) {\n      if (PH == \"Acidic Soil\") {\n        return \"PHAcid\";\n      } else if (PH == \"Neutral Soil\") {\n        return \"PHNeutral\";\n      } else if (PH == \"I Don't Know\") {\n        return \"PHNeutral\";\n      } else {\n        return \"PHBasicAlkaline\";\n      }\n    } //********* see note on 'getSoilString' above\n\n\n    getShadinessString(shadiness) {\n      if (shadiness == \"Heavy Shade\") {\n        return \"ShadeFull\";\n      } else if (shadiness == \"Medium Shade\") {\n        return \"ShadeSemi\";\n      } else if (shadiness == \"Multiple Levels of Shadiness\") {\n        return \"ShadeSemi\";\n      } else {\n        return \"ShadeNone\";\n      }\n    }\n\n    getGardenSizeString(size) {\n      if (size == \"A Window Box\") {\n        return \"WindoxBox\";\n      } else if (size == \"Plant Pots Outside on a Patio or Balcony\") {\n        return \"OutdoorPlantPots\";\n      } else if (size == \"A Small Garden\") {\n        return \"SmallGarden\";\n      } else if (size == \"A Large Garden\") {\n        return \"LargeGarden\";\n      } else if (size == \"An Allotment\") {\n        return \"Allotment\";\n      } else {\n        return \"FieldFields\";\n      }\n    }\n\n  }\n\n  WildlifeAnswers.ɵfac = function WildlifeAnswers_Factory(t) {\n    return new (t || WildlifeAnswers)();\n  };\n\n  WildlifeAnswers.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WildlifeAnswers,\n    factory: WildlifeAnswers.ɵfac,\n    providedIn: 'root'\n  });\n  return WildlifeAnswers;\n})();","map":null,"metadata":{},"sourceType":"module"}