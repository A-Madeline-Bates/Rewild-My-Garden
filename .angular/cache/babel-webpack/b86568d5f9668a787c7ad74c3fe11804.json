{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { PollinatorDialogComponent } from '../pollinator-dialog/pollinator-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/pollinator-suggestions.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button-toggle\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/button\";\n\nfunction PollinatorSuggestionsComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵelementStart(2, \"mat-card\", 8);\n    i0.ɵɵelementStart(3, \"p\", 9);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"img\", 10);\n    i0.ɵɵelementStart(6, \"mat-card-content\", 11);\n    i0.ɵɵelementStart(7, \"p\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"mat-card-actions\", 12);\n    i0.ɵɵelementStart(10, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function PollinatorSuggestionsComponent_div_6_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const flower_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.openDialog(flower_r1);\n    });\n    i0.ɵɵtext(11, \"See info\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const flower_r1 = ctx.$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", flower_r1[0].Title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", flower_r1[0].Pathname, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", flower_r1[0].LatinName, \" \");\n  }\n}\n\nexport let PollinatorSuggestionsComponent = /*#__PURE__*/(() => {\n  class PollinatorSuggestionsComponent {\n    constructor(wildlifeResponseService, dialog) {\n      this.wildlifeResponseService = wildlifeResponseService;\n      this.dialog = dialog;\n      /*********************************************************************\n      ***********************************************************************\n      **************** MAIN LOGIC TO CHOOSE AND LOAD PLANTS *****************\n      ***********************************************************************\n      ***********************************************************************/\n      //Subscriptions to wildlife answers data\n\n      this.monthsSub = new Subscription();\n      this.displayFlowers = [];\n      /***********************************************************************\n      ***********************************************************************\n      ************************ LOGIC TO SAVE TO EMAIL ***********************\n      ***********************************************************************\n      ***********************************************************************/\n      //Code used to output when someone wants to save a piece of advice\n\n      this.isChecked = false;\n      this.newSaveEvent = new EventEmitter();\n      this.newRemoveEvent = new EventEmitter(); // here we are subscribing to the listener\n\n      this.monthsSub = this.wildlifeResponseService.getMonthsUsedListener().subscribe(retrievedAnswers => {\n        //select the flowers that will be displayed\n        this.selectMain(retrievedAnswers);\n      }, err => {\n        console.error(err);\n      });\n    } //selects the 'main' plants that will be on the initial grid display\n\n\n    selectMain(retrievedAnswers) {\n      //iterate for each month\n      for (let i = 0; i < retrievedAnswers.length; i++) {\n        const ourMonthDisplay = [];\n        let recursiveBackstop = 0; //Choose first flower in the array- this is the one that will be displayed on the main page\n\n        this.chooseRandomFirst(i, recursiveBackstop, retrievedAnswers, ourMonthDisplay); //Next four flowers are chosen- these will be displayed in the pop up\n\n        if (retrievedAnswers[i].length < 8) {\n          //If there is 7 or fewer flowers to choose from, just choose the first 4 to be displayed in the pop-up\n          //If there are fewer than 5, (j < retrievedAnswers[i].length) assures we won't try and access an array cell that doesn't exist.\n          //'displayCount = 1' here is to accommodate for the fact that we don't want to overwrite ourMonthDisplay[0] because it\n          //holds our main display plant\n          let displayCount = 1;\n\n          for (let j = 0; j < 4 && j < retrievedAnswers[i].length; j++) {\n            //If the most recent retrieved plant != the plant we're displaying in the main grid, set it and iterate our count\n            if (retrievedAnswers[i][j].LatinName != ourMonthDisplay[0].LatinName) {\n              ourMonthDisplay[displayCount] = retrievedAnswers[i][j];\n              displayCount++;\n            } //If retrievedAnswers[i][j].LatinName == ourMonthDisplay[0].LatinName \n            // - Do not iterate displayCount\n            // - Do not set anything to ourMonthDisplay\n            //By using displayCount we can skip a cell in retrievedAnswers without leaving a corresponding gap in our\n            //ourMonthDisplay array (as would be the case if we did ourMonthDisplay[j] = retrievedAnswers[i][j] and tried to skip\n\n          }\n        } else {\n          for (let p = 1; p < 5; p++) {\n            let recursiveBackstopLoop = 0;\n            this.chooseRandomForPopUp(i, p, recursiveBackstopLoop, retrievedAnswers, ourMonthDisplay);\n          }\n        } //add the month array to an array which holds all months\n\n\n        this.displayFlowers[i] = ourMonthDisplay;\n      }\n    }\n\n    chooseRandomFirst(i, recursiveBackstop, retrievedAnswers, ourMonthDisplay) {\n      //Find the first flower- the one that will be displayed on our main grid\n      let flag = \"set\"; //Get a random cell index from the retrieved answers grid\n\n      const rand = Math.floor(Math.random() * retrievedAnswers[i].length); //Set a response corresponding to this random index choice\n\n      let tempDisplay = retrievedAnswers[i][rand]; //Look at the cell that has been chosen for display in our previous months\n\n      for (let k = 0; k < i; k++) {\n        //If we find that the choice we've made is one that has been made in a previous month, this will not\n        //be our final choice\n        if (this.displayFlowers[k][0].LatinName == tempDisplay.LatinName) {\n          flag = \"dontSet\";\n        }\n      }\n\n      if (flag == \"set\") {\n        //Set this choice as our final answer\n        ourMonthDisplay[0] = tempDisplay;\n      } //if flag!=\"set\" it must equal \"dontSet\"\n      else {\n        if (recursiveBackstop == 5) {\n          ourMonthDisplay[0] = tempDisplay;\n        } else {\n          //The recursiveBackstop is our getout clause. If we search recursively for a non-repeating\n          //flower 5 times without finding one we can assume that there are not enough plants available\n          //to not feature a repeat, and so we just let a repeat happen. This is so we do not end up in an infinite loop.\n          recursiveBackstop++; //call the function recursively until we find an appropriate choice\n\n          this.chooseRandomFirst(i, recursiveBackstop, retrievedAnswers, ourMonthDisplay);\n        }\n      }\n    }\n\n    chooseRandomForPopUp(i, p, recursiveBackstop, retrievedAnswers, ourMonthDisplay) {\n      //Find the first flower- the one that will be displayed on our main grid\n      let flag = \"set\"; //Get a random cell index from the retrieved answers grid\n\n      const rand = Math.floor(Math.random() * retrievedAnswers[i].length); //Set a response corresponding to this random index choice\n\n      let tempDisplay = retrievedAnswers[i][rand]; //Look at the previous plants chosen for this pop up\n\n      for (let k = 0; k < ourMonthDisplay.length; k++) {\n        //If we find that the choice we've made is one that has been made in the popup already, this will not\n        //be our final choice\n        if (ourMonthDisplay[k].LatinName == tempDisplay.LatinName) {\n          flag = \"dontSet\";\n        }\n      }\n\n      if (flag == \"set\") {\n        //Set this choice as our final answer\n        ourMonthDisplay[p] = tempDisplay;\n      } //if flag!=\"set\" it must equal \"dontSet\"\n      else {\n        if (recursiveBackstop == 5) {\n          ourMonthDisplay[p] = tempDisplay;\n        } else {\n          //The recursiveBackstop is our getout clause. If we search recursively for a non-repeating\n          //flower 5 times without finding one we just let a repeat happen. \n          //This is to help prioritise speed over avoiding repetition.\n          //For this function it is possibly overkill, but can't hurt.\n          recursiveBackstop++; //call the function recursively until we find an appropriate choice\n\n          this.chooseRandomForPopUp(i, p, recursiveBackstop, retrievedAnswers, ourMonthDisplay);\n        }\n      }\n    } //this function is passed the correct month data through the HTML\n\n\n    openDialog(thisMonthData) {\n      const dialogRef = this.dialog.open(PollinatorDialogComponent, {\n        height: '480px',\n        width: '750px',\n        data: thisMonthData\n      });\n    }\n\n    ngOnInit() {} //This is called whenever this component is about to be removed from the DOM\n\n\n    ngOnDestroy() {\n      //By calling our subscription at this point and unsubscribing, we are preventing memory leaks\n      this.monthsSub.unsubscribe();\n    } // make changes to the array in wildlifeLayout\n\n\n    toggleSave() {\n      if (!this.isChecked) {\n        this.addNewSave();\n        this.isChecked = true;\n      } else {\n        this.removeSave();\n        this.isChecked = false;\n      }\n    }\n\n    removeSave() {\n      this.newRemoveEvent.emit(\"Make your Garden Flower from Spring until Autumn\");\n    }\n\n    addNewSave() {\n      const saveObj = {\n        Header: \"Make your Garden Flower from Spring until Autumn\",\n        Pathname: \"/assets/plant_images/Colchicum_autumnale.jpeg\",\n        Justification: \"It is helpful to have plants flowering in your garden from spring to autumn. Each plant blooms in the month specified and suits your garden, so you can make your garden a home to pollinators all year.\",\n        BodyText: \"These were the plants that were recommended for you:<br>\" + this.getRecommendedPlantsHTML(),\n        Name: \"Colchicum autumnale\",\n        Username: \"Stemonitis\",\n        Copyright: \"Public Domain\",\n        Link: \"https://commons.m.wikimedia.org/wiki/File:Colchicum_autumnale.jpg?fbclid=IwAR3znOBrPSSkVfPTMvITNoOQE-1OnQVI2DuhTYuC6IB0apVSwcRDpAte6NU\"\n      };\n      this.newSaveEvent.emit(saveObj);\n    }\n\n    getRecommendedPlantsHTML() {\n      let ourString = \"\";\n\n      for (let i = 0; i < this.displayFlowers.length; i++) {\n        ourString = ourString + \"<b>\" + this.displayFlowers[i][0].Title + \"</b><br>\";\n\n        for (let j = 0; j < this.displayFlowers[i].length; j++) {\n          ourString = ourString + this.displayFlowers[i][j].LatinName; //If there are common names to list, add them between brackets\n\n          if (this.displayFlowers[i][j].CommonName != \"\" && this.displayFlowers[i][j].CommonName != \" \") {\n            ourString = ourString + \" (\" + this.displayFlowers[i][j].CommonName + \")<br>\";\n          } //If there are none, just add to list\n          else {\n            ourString = ourString + \"<br>\";\n          }\n        }\n      }\n\n      return ourString;\n    }\n\n  }\n\n  PollinatorSuggestionsComponent.ɵfac = function PollinatorSuggestionsComponent_Factory(t) {\n    return new (t || PollinatorSuggestionsComponent)(i0.ɵɵdirectiveInject(i1.WildlifeResponse), i0.ɵɵdirectiveInject(i2.MatDialog));\n  };\n\n  PollinatorSuggestionsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PollinatorSuggestionsComponent,\n    selectors: [[\"app-pollinator-suggestions\"]],\n    hostBindings: function PollinatorSuggestionsComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"unloaded\", function PollinatorSuggestionsComponent_unloaded_HostBindingHandler() {\n          return ctx.ngOnDestroy();\n        });\n      }\n    },\n    outputs: {\n      newSaveEvent: \"newSaveEvent\",\n      newRemoveEvent: \"newRemoveEvent\"\n    },\n    decls: 12,\n    vars: 1,\n    consts: [[1, \"card\"], [1, \"our-card-body\"], [1, \"SmallSubheader\"], [\"class\", \"grid-container\", 4, \"ngFor\", \"ngForOf\"], [1, \"bottomBar\"], [\"multiple\", \"\"], [3, \"click\"], [1, \"grid-container\"], [\"id\", \"innerCard\", 1, \"card\"], [1, \"BodySubtitle\"], [\"mat-card-image\", \"\", \"alt\", \"Plant_Image\", 3, \"src\"], [1, \"plantName\"], [\"align\", \"end\"], [\"mat-stroked-button\", \"\", \"color\", \"primary\", \"mat-button\", \"\", 3, \"click\"]],\n    template: function PollinatorSuggestionsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"p\", 2);\n        i0.ɵɵtext(3, \"Plants Recommended for Your Garden\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p\");\n        i0.ɵɵtext(5, \"It is helpful to have plants flowering in your garden from spring to autumn. Each plant blooms in the month specified and suits your garden, so you can make your garden a home to pollinators all year.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, PollinatorSuggestionsComponent_div_6_Template, 12, 3, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 4);\n        i0.ɵɵelementStart(8, \"mat-button-toggle-group\", 5);\n        i0.ɵɵelementStart(9, \"mat-button-toggle\", 6);\n        i0.ɵɵlistener(\"click\", function PollinatorSuggestionsComponent_Template_mat_button_toggle_click_9_listener() {\n          return ctx.toggleSave();\n        });\n        i0.ɵɵtext(10, \"Save to My Goals\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"br\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.displayFlowers);\n      }\n    },\n    directives: [i3.NgForOf, i4.MatButtonToggleGroup, i4.MatButtonToggle, i5.MatCard, i5.MatCardImage, i5.MatCardContent, i5.MatCardActions, i6.MatButton],\n    styles: [\".grid-container[_ngcontent-%COMP%]{display:inline-grid;grid-row-gap:4px;grid-template-columns:repeat(auto-fill,166px)}.our-card-body[_ngcontent-%COMP%]{flex:1 1 auto;min-height:1px;padding-top:1.25rem;padding-left:1.25rem;padding-right:1.25rem;padding-bottom:4px}#innerCard[_ngcontent-%COMP%]{width:160px;margin-bottom:6px}.card[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{object-fit:none;object-position:center;height:160px}.card-title[_ngcontent-%COMP%]{text-align:center;font-size:10px}.plantName[_ngcontent-%COMP%]{height:30px}.SmallSubheader[_ngcontent-%COMP%]{font-family:Playfair Display,serif!important;font-size:25px!important;line-height:1.1}.mat-button-toggle-group[_ngcontent-%COMP%]{margin-bottom:1.25rem;margin-right:1.25rem;margin-left:1.25rem;float:right}.mat-button-toggle-group[_ngcontent-%COMP%]{margin-left:7px;height:36px;align-items:center}.mat-button-toggle[_ngcontent-%COMP%]{background-color:#fff;color:#fff}.mat-button-toggle[_ngcontent-%COMP%]:hover{background-color:transparent;color:#fff!important}.mat-button-toggle-checked[_ngcontent-%COMP%]{background-color:#96e6a1;color:#96e6a1!important}\"]\n  });\n  return PollinatorSuggestionsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}