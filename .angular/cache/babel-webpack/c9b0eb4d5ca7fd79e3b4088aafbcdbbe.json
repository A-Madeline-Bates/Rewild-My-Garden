{"ast":null,"code":"import { Subject, Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./multichoice-answers.service\";\nimport * as i2 from \"./location-answer.service\";\nexport let AllAnswers = /*#__PURE__*/(() => {\n  class AllAnswers {\n    constructor(wildlifeAnswersService, locationAnswersService) {\n      this.wildlifeAnswersService = wildlifeAnswersService;\n      this.locationAnswersService = locationAnswersService;\n      this.updatedAnswers = new Subject();\n      this.answersSubMulti = new Subscription();\n      this.answersSubLocs = new Subscription(); //here we subscribe to the multichoice answers and then the location and turn them into one subscription object\n\n      this.answersSubLocs = this.locationAnswersService.getAnswerUpdateListener().subscribe(retrievedLocation => {\n        console.log(\"retrieved location\");\n        this.answersSubMulti = this.wildlifeAnswersService.getAnswerUpdateListener().subscribe(retrievedAnswers => {\n          console.log(\"retrieved other answers\");\n          const allAnswers = {\n            soil: retrievedAnswers.soil,\n            ph: retrievedAnswers.ph,\n            shade: retrievedAnswers.shade,\n            gardenSize: retrievedAnswers.gardenSize,\n            childFriendly: retrievedAnswers.childFriendly,\n            cheap: retrievedAnswers.cheap,\n            easy: retrievedAnswers.easy,\n            renting: retrievedAnswers.renting,\n            pavedGardens: retrievedAnswers.pavedGardens,\n            x: retrievedLocation.x,\n            y: retrievedLocation.y,\n            longitude: retrievedLocation.longitude,\n            latitude: retrievedLocation.latitude,\n            hardiness: retrievedLocation.hardiness\n          };\n          this.updatedAnswers.next(allAnswers);\n        }, err => {\n          console.log(err);\n        });\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    getAnswerUpdateListener() {\n      return this.updatedAnswers.asObservable();\n    } //This is called whenever this component is about to be removed from the DOM\n\n\n    ngOnDestroy() {\n      //By calling our subscription at this point and unsubscribing, we are preventing memory leaks\n      this.answersSubMulti.unsubscribe();\n      this.answersSubLocs.unsubscribe();\n    }\n\n  }\n\n  AllAnswers.ɵfac = function AllAnswers_Factory(t) {\n    return new (t || AllAnswers)(i0.ɵɵinject(i1.WildlifeAnswers), i0.ɵɵinject(i2.LocationAnswers));\n  };\n\n  AllAnswers.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AllAnswers,\n    factory: AllAnswers.ɵfac,\n    providedIn: 'root'\n  });\n  return AllAnswers;\n})();","map":null,"metadata":{},"sourceType":"module"}