{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport axios from 'axios';\nimport { Subscription } from 'rxjs';\nimport { ProximityEnvironment } from '../advice-response/proximity-env';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/checkbox\";\nimport * as i8 from \"@angular/material/button\";\n\nfunction EmailSendComponent_mat_error_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid email address \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction EmailSendComponent_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter your email to have your advice sent to you. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let EmailSendComponent = /*#__PURE__*/(() => {\n  class EmailSendComponent {\n    constructor(httpClient) {\n      this.httpClient = httpClient; // a failure of the automatic local are updates is if they have filled in the form multiple times for different properties, the\n      // email they get won't specify whether we are talking about their garden/allotment etc and they will only get\n      // one email per email address- after that their email is taken off the 'potential recipients' list **********\n      // If a user clicks 'send email' on the results page multiple times they will end up in the database multiple\n      // times and therefore could trigger an update for themselves- this is an extreme example of a general problem about\n      // this system being a bit of a gesture rather than something that is very thoughtful in the way that it links people.\n      //the email that the user has submitted\n\n      this.email = \"\";\n      this.localUpdates = \"\";\n      this.emailFormControl = new FormControl('', [Validators.required, Validators.email]);\n      this.matcher = new MyErrorStateMatcher();\n      this.extraSub = new Subscription();\n      this.userSubOGHedgehog = new Subscription();\n      this.userSubOGPond = new Subscription();\n      this.hedgehogUserSub = new Subscription();\n      this.pondUserSub = new Subscription();\n      this.updateSub = new Subscription();\n      this.updateSubPond = new Subscription();\n      this.savedAdviceFinal = [];\n      this.latitudeFinal = 0;\n      this.longitudeFinal = 0;\n    }\n\n    ngOnInit() {}\n    /********************************************************************\n    **********************************************************************\n    ******************************* INIT LOGIC ***************************\n    **********************************************************************\n    ***********************************************************************/\n\n\n    processEmailData() {\n      this.email = this.emailFormControl.value;\n\n      if (this.savedAdviceFinal.length == 0) {\n        alert(\"You haven't saved any advice yet! Please select some advice and then re-enter your email.\");\n      } else {\n        this.sendEmail(); //we are sending updates before we add them to the database- so does not count themselves\n\n        this.sendHedgehogUpdateEmails();\n        this.sendPondUpdateEmails();\n        this.saveUserData();\n      }\n    }\n    /********************************************************************\n    **********************************************************************\n    ******************* SEND ADVICE RESULTS EMAIL ************************\n    **********************************************************************\n    ***********************************************************************/\n\n\n    sendEmail() {\n      const emailContent = {\n        email: this.email,\n        emailBody: this.getEmailContent()\n      };\n      axios.post('https://rewildmygarden-api.azurewebsites.net/api/sendmail', emailContent).then(response => {\n        alert(\"An email was sent to \" + this.email + \". Happy gardening!\");\n      }).catch(error => {\n        console.error('There was an error!', error);\n      });\n    }\n\n    getEmailContent() {\n      let htmlString = '<head><link href=\"https://fonts.googleapis.com/css2?family=Playfair+Display&display=swap\" rel=\"stylesheet\"></head><body>' + '<p style=\"text-align: center; font-family:' + \"'Playfair Display'\" + ', serif; font-size: 30px;\">Thank you for using Rewild My Garden!</p>' + '<p style=\"text-align: center; font-size: 20px\">Please see the advice you saved below: </p><br>';\n\n      for (let i = 0; i < this.savedAdviceFinal.length; i++) {\n        htmlString = htmlString + \"<div>\" + \"<div>\" + '<p style=\"font-family:' + \"'Playfair Display'\" + ', serif; font-size: 20px; line-height: 0.8;\">' + this.savedAdviceFinal[i].Header + '</p>' + \"<p><b>\" + this.savedAdviceFinal[i].Justification + \"</b></p>\" + \"<p>\" + this.savedAdviceFinal[i].BodyText + \"</p>\" + '</div>' + '<br>';\n      }\n\n      htmlString = htmlString + \"</body>\";\n      return htmlString;\n    }\n    /********************************************************************\n    **********************************************************************\n    ******************* SEND LOCAL HEDGEHOG UPDATE EMAILS ****************\n    **********************************************************************\n    ***********************************************************************/\n\n\n    sendHedgehogUpdateEmails() {\n      this.userSubOGHedgehog = this.httpClient.get(\"https://rewildmygarden-api.azurewebsites.net/api/userData?Distance=\" + ProximityEnvironment.CLOSEST + \"&Longitude=\" + this.longitudeFinal + \"&Latitude=\" + this.latitudeFinal).subscribe(response => {\n        //search for ppl in the area who have asked for updates, and who have not been emailed about hedgehogs before\n        for (let i = 0; i < response.length; i++) {\n          if (response[i].properties.hedgehogSent != \"true\" && response[i].properties.localUpdates == \"true\") {\n            //we couldn't return 'true' and 'false' from within a subscription, so we had to make the function itself \n            //observable, and pipe the 'return true', 'return false' information into the observable. This is what 'data'\n            //represents here\n            this.hedgehogUserSub = this.areThereEnoughHedgehog(response[i]).subscribe(data => {\n              if (data == true) {\n                this.createHedgehogEmail(response[i].properties.email); //update the 'hedgehogSent' variable so that each user only recieves one hedgehog email\n\n                this.updateHedgehogSent(response[i].properties.email);\n              }\n            });\n          }\n        }\n      });\n    } //***************** ADD ERR TO ALL SUBS\n\n\n    areThereEnoughHedgehog(searchUser) {\n      //find THEIR radiuses, and see whether anyone near them has put in a hedgehog hole\n      return this.httpClient.get(\"https://rewildmygarden-api.azurewebsites.net/api/userData?Distance=\" + ProximityEnvironment.CLOSEST + \"&Longitude=\" + searchUser.geometry.coordinates[0] + \"&Latitude=\" + searchUser.geometry.coordinates[1]).pipe(map(response => {\n        let hedgehogCount = 0;\n\n        for (let j = 0; j < response.length; j++) {\n          for (let k = 0; k < response[j].properties.savedAdvice.length; k++) {\n            if (response[j].properties.savedAdvice[k].Header == \"Create a Hedgehog Hole Highway\") {\n              hedgehogCount++;\n            }\n          }\n        } //if our original user put in a hedgehog hole, count as +1, if not, no +1 (the original user is not yet in the db)\n\n\n        if (this.didOGUserHedgehog() == true) {\n          hedgehogCount++;\n        } //if >=2, then send email\n\n\n        if (hedgehogCount >= 2) {\n          return true;\n        } //if there aren't 2 or more people in this vicinity who have saved hedgehog advice, do not send email\n\n\n        return false;\n      }));\n    }\n\n    didOGUserHedgehog() {\n      for (let p = 0; p < this.savedAdviceFinal.length; p++) {\n        if (this.savedAdviceFinal[p].Header == \"Create a Hedgehog Hole Highway\") {\n          return true;\n        }\n      } //If \"Make a Hedgehog House\" is not found in their saved advice, return false\n\n\n      return false;\n    }\n\n    createHedgehogEmail(ourEmail) {\n      const emailContent = {\n        email: ourEmail,\n        emailBody: this.getHedgehogEmailContent()\n      };\n      axios.post('https://rewildmygarden-api.azurewebsites.net/api/sendmail', emailContent).catch(error => {\n        console.error('There was an error!', error);\n      });\n    }\n\n    getHedgehogEmailContent() {\n      let htmlString = '<head><link href=\"https://fonts.googleapis.com/css2?family=Playfair+Display&display=swap\" rel=\"stylesheet\"></head><body>' + '<p style=\"text-align: center; font-family:' + \"'Playfair Display'\" + ', serif; font-size: 30px;\">Update from Rewild My Garden!</p>' + '<p style=\"text-align: center; font-size: 20px\">Multiple people in your area have put in hedgehog holes.</p>';\n      htmlString = htmlString + \"<div>\" + \"<div>\" + '<p> Hedgehogs travel about a mile every night to find food. By making sure your fences have holes in ' + \"them, you are more likely to be visited and be part of their night time walks. \" + '</p>' + \"<p>\" + \"Hedgehogs often get trapped in gardens because fences make it impossible \" + \"for them to roam around. Our data suggests that multiple people in your \" + \"neighbourhood have put in hedgehog holes. That means if you do the same \" + \"thing, you could potentially create a large habitat for your local hedgehogs! Find out how to make a hole and \" + \"spread the news to more of your neighbours. Go to www.hedgehogstreet.org for more guidance!\" + \"</p>\" + \"<p><b>\" + \"This is a message from Rewild-My-Garden.com. Please email RewildMyGarden@gmail.com if you \" + \"would like to make sure you don't recieve any more emails from us.\" + \"</b></p>\" + '</div>' + '<br>';\n      htmlString = htmlString + \"</body>\";\n      return htmlString;\n    }\n    /*********************************************************************\n    **********************************************************************\n    ***** UPDATE DB SO EACH USER ONLY GETS ONE HEDGEHOG UPDATE EMAIL *****\n    **********************************************************************\n    ***********************************************************************/\n\n\n    updateHedgehogSent(ourEmail) {\n      this.updateSub = this.httpClient.put(\"https://rewildmygarden-api.azurewebsites.net/api/userDataUpdate?\" + \"Email=\" + ourEmail + \"&EmailUpdateType=properties.hedgehogSent\", \"true\").subscribe(); // ************ should .subscribe be here?\n    }\n    /********************************************************************\n    **********************************************************************\n    ********************* SEND LOCAL POND UPDATE EMAILS *******************\n    **********************************************************************\n    ***********************************************************************/\n    //Obviously this is a good example of copy and paste code- this need to be changes when/if we have time ! ********\n\n\n    sendPondUpdateEmails() {\n      this.userSubOGPond = this.httpClient.get(\"https://rewildmygarden-api.azurewebsites.net/api/userData?Distance=\" + ProximityEnvironment.USEFUL_PROXIMITY + \"&Longitude=\" + this.longitudeFinal + \"&Latitude=\" + this.latitudeFinal).subscribe(response => {\n        for (let i = 0; i < response.length; i++) {\n          if (response[i].properties.pondSent != \"true\" && response[i].properties.localUpdates == \"true\") {\n            this.pondUserSub = this.areThereEnoughPond(response[i]).subscribe(data => {\n              if (data == true) {\n                this.createPondEmail(response[i].properties.email);\n                this.updatePondSent(response[i].properties.email);\n              }\n            });\n          }\n        }\n      });\n    } //***************** ADD ERR TO ALL SUBS\n\n\n    areThereEnoughPond(searchUser) {\n      return this.httpClient.get(\"https://rewildmygarden-api.azurewebsites.net/api/userData?Distance=\" + ProximityEnvironment.USEFUL_PROXIMITY + \"&Longitude=\" + searchUser.geometry.coordinates[0] + \"&Latitude=\" + searchUser.geometry.coordinates[1]).pipe(map(response => {\n        let pondCount = 0;\n\n        for (let j = 0; j < response.length; j++) {\n          for (let k = 0; k < response[j].properties.savedAdvice.length; k++) {\n            if (response[j].properties.savedAdvice[k].Header == \"Put in a Small Water Feature\" || response[j].properties.savedAdvice[k].Header == \"Create a Container Water Feature\" || response[j].properties.savedAdvice[k].Header == \"Put in a Pond\") {\n              pondCount++;\n            }\n          }\n        }\n\n        if (this.didOGUserPond() == true) {\n          pondCount++;\n        }\n\n        if (pondCount >= 2) {\n          return true;\n        }\n\n        return false;\n      }));\n    }\n\n    didOGUserPond() {\n      for (let p = 0; p < this.savedAdviceFinal.length; p++) {\n        if (this.savedAdviceFinal[p].Header == \"Put in a Small Water Feature\" || this.savedAdviceFinal[p].Header == \"Create a Container Water Feature\" || this.savedAdviceFinal[p].Header == \"Put in a Pond\") {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    createPondEmail(ourEmail) {\n      const emailContent = {\n        email: ourEmail,\n        emailBody: this.getPondEmailContent()\n      };\n      axios.post('https://rewildmygarden-api.azurewebsites.net/api/sendmail', emailContent).catch(error => {\n        console.error('There was an error!', error);\n      });\n    } // a failure of this is if they have filled in the form multiple times for different properties - the\n    // email they get won't specify whether we are talking about their garden/allotment etc and they will only get\n    // one email per address- after that their email is taken off the 'potential recipients' list **********\n\n\n    getPondEmailContent() {\n      let htmlString = '<head><link href=\"https://fonts.googleapis.com/css2?family=Playfair+Display&display=swap\" rel=\"stylesheet\"></head><body>' + '<p style=\"text-align: center; font-family:' + \"'Playfair Display'\" + ', serif; font-size: 30px;\">Update from Rewild My Garden!</p>' + '<p style=\"text-align: center; font-size: 20px\">Multiple people in your area have put in a ponds.</p>';\n      htmlString = htmlString + \"<div>\" + \"<div>\" + '<p> Natural freshwater ponds are in decline, due to farm run off and silt build up. Even a small garden pond can help make a difference.' + '</p>' + \"<p>\" + \"Our data suggests that multiple people in your neighbourhood have put in ponds. That means if \" + \"you do the same thing, you could potentially create a large habitat \" + \"for frogs and dragonflies in your local area! Being able to travel between garden ponds is great for \" + \"aquatic animals, because if they are able to get access to multiple ponds, \" + \"they are more able to build healthy populations. By putting in a pond, you can also provides pond animals with protection in case a neighbor \" + \"decides to take out a pond, because your pond can provide your local pond animals with somewhere safe to go. </p>\" + \"<p> Here are some options for different garden sizes:\" + \"</p>\" + \"<p> • Birds and insects need a place to drink or bathe, so if you provide a little bit of water and keep it topped up \" + \"and clean you will attract wildlife visitors. Birds need water to drink and bathe all through the year. To make a bath \" + \"for birds, put out a shallow dish or container, ideally with slopping sides no more than 5cm deep. If it gets cold, remove \" + \"ice so that birds can still get a drink. If you don't have room for a bird bath, even a small amount of water kept topped up \" + \"can provide a drink for pollinators. Using a shallow dish with pebbles or marbles will provide a safe place for an insect to \" + \"have a drink.\" + \"</p>\" + \"<p> • You don't need lots of space to make a pond- using a pot or container you can provide help to dragonflies and frogs. \" + \"You can find plenty of ideas about how to start you pot pond online. Just make sure your pot isn't porous and doesn't have a \" + \"hole in it!  You can find a fun project to create a container pond <a href=\\\"https://www.rhs.org.uk/ponds/wildlife-container-pond-steps\\\">here</a>.\" + \"</p>\" + \"<p> • Put in a full sized pond. Ideally keep it topped up with fresh rainwater (you can catch a lot of water in a water butt fed \" + \"from a garden shed downpipe). Site your pond in the sun and away from trees so it doesn't fill up with fallen leaves and provide \" + \"a shallow end or a ramp or a pot just below the surface to help wildlife get to the water safely. If you can't fill it with \" + \"rainwater, filling it up with a hose is also great!\" + \"</p>\" + \"<p><b>\" + \"This is a message from Rewild-My-Garden.com. Please email RewildMyGarden@gmail.com if you \" + \"would like to make sure you don't recieve any more emails from us.\" + \"</b></p>\" + '</div>' + '<br>';\n      htmlString = htmlString + \"</body>\";\n      return htmlString;\n    }\n    /*********************************************************************\n    **********************************************************************\n    ******* UPDATE DB SO EACH USER ONLY GETS ONE POND UPDATE EMAIL ********\n    **********************************************************************\n    ***********************************************************************/\n\n\n    updatePondSent(ourEmail) {\n      this.updateSubPond = this.httpClient.put(\"https://rewildmygarden-api.azurewebsites.net/api/userDataUpdate?\" + \"Email=\" + ourEmail + \"&EmailUpdateType=properties.pondSent\", \"true\").subscribe(); // ************ should .subscribe be here?\n    }\n    /********************************************************************\n    **********************************************************************\n    *************************** SAVE USER'S DATA *************************\n    **********************************************************************\n    ***********************************************************************/\n    //Triggered by processEmailData() below\n\n\n    saveUserData() {\n      //Correct order of coordinates in geojson is [longitude, latitude, elevation] https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.1\n      const geoJsonObj = {\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"email\": this.email,\n          \"savedAdvice\": this.savedAdviceFinal,\n          \"localUpdates\": this.localUpdates,\n          //initial state is 'no emails sent'\n          \"hedgehogSent\": \"false\",\n          \"pondSent\": \"false\"\n        },\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [this.longitudeFinal, this.latitudeFinal]\n        }\n      }; //************* this line may not need to include a .subscribe()\n      //check for err????\n\n      this.extraSub = this.httpClient.post(\"https://rewildmygarden-api.azurewebsites.net/api/userData\", geoJsonObj).subscribe();\n    }\n\n    ngOnDestroy() {\n      this.extraSub.unsubscribe();\n      this.userSubOGPond.unsubscribe();\n      this.userSubOGHedgehog.unsubscribe();\n      this.hedgehogUserSub.unsubscribe();\n      this.updateSub.unsubscribe();\n      this.updateSubPond.unsubscribe();\n      this.pondUserSub.unsubscribe();\n    }\n\n  }\n\n  EmailSendComponent.ɵfac = function EmailSendComponent_Factory(t) {\n    return new (t || EmailSendComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n\n  EmailSendComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EmailSendComponent,\n    selectors: [[\"app-email-send\"]],\n    inputs: {\n      savedAdviceFinal: \"savedAdviceFinal\",\n      latitudeFinal: \"latitudeFinal\",\n      longitudeFinal: \"longitudeFinal\"\n    },\n    decls: 31,\n    vars: 5,\n    consts: [[\"id\", \"emailBoxID\"], [1, \"card\"], [1, \"card-body\"], [1, \"Subheader\"], [1, \"card-text\"], [1, \"altColour\"], [\"routerLink\", \"/privacy\"], [1, \"example-form\"], [\"appearance\", \"outline\", 1, \"example-full-width\"], [\"type\", \"email\", \"matInput\", \"\", \"placeholder\", \"Ex. pat@example.com\", 3, \"formControl\", \"errorStateMatcher\"], [4, \"ngIf\"], [1, \"personal-choices\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-stroked-button\", \"\", \"color\", \"primary\", \"mat-button\", \"\", 3, \"click\"]],\n    template: function EmailSendComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"p\", 3);\n        i0.ɵɵtext(4, \"Have Your Advice Emailed to You\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"p\", 4);\n        i0.ɵɵtext(6, \" You can have advice from this page emailed to you as a record. Simply go through the page and click 'Save To My Goals' next to any advice that you're interested in. If you fill in your email below and click 'Send Email', the advice you have saved will be sent to your inbox. \");\n        i0.ɵɵelement(7, \"br\");\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵtext(9, \" If the site isn't providing much information about things that people are doing in your local area, you can select 'Send local area updates' and you will recieve an update if multiple people in your area have said that they are planning to put in a hedgehog hole or pond. By collaborating, you can create larger habitats for local wildlife. \");\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelement(11, \"br\");\n        i0.ɵɵelementStart(12, \"span\", 5);\n        i0.ɵɵtext(13, \"If you have advice emailed to you, we will save some of your information so that we can let users near you know if they can support what you are doing to help local wildlife. Please have a look at our \");\n        i0.ɵɵelementStart(14, \"a\", 6);\n        i0.ɵɵtext(15, \"privacy policy\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(16, \" to learn more.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(17, \" We don't have a newsletter, so the only communication you will ever recieve from us is your wildlife advice and our local updates if you have asked for them. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"form\", 7);\n        i0.ɵɵelementStart(19, \"mat-form-field\", 8);\n        i0.ɵɵelementStart(20, \"mat-label\");\n        i0.ɵɵtext(21, \"Enter your email here\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"input\", 9);\n        i0.ɵɵtemplate(23, EmailSendComponent_mat_error_23_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵtemplate(24, EmailSendComponent_mat_error_24_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"p\");\n        i0.ɵɵelementStart(26, \"mat-checkbox\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function EmailSendComponent_Template_mat_checkbox_ngModelChange_26_listener($event) {\n          return ctx.localUpdates = $event;\n        });\n        i0.ɵɵtext(27, \"Send Local Area Updates\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function EmailSendComponent_Template_button_click_28_listener() {\n          return ctx.processEmailData();\n        });\n        i0.ɵɵtext(29, \" Send Email \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(30, \"p\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(22);\n        i0.ɵɵproperty(\"formControl\", ctx.emailFormControl)(\"errorStateMatcher\", ctx.matcher);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"email\") && !ctx.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"required\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.localUpdates);\n      }\n    },\n    directives: [i2.RouterLinkWithHref, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm, i4.MatFormField, i4.MatLabel, i5.MatInput, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective, i6.NgIf, i7.MatCheckbox, i3.NgModel, i8.MatButton, i4.MatError],\n    styles: [\".altColour[_ngcontent-%COMP%]{color:#295e20}\"]\n  });\n  /** Error when invalid control is dirty, touched, or submitted. */\n\n  return EmailSendComponent;\n})();\nexport class MyErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}