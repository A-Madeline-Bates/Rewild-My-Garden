{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport axios from 'axios';\nimport { Subscription } from 'rxjs';\nimport { osApiEnvironment } from './os-api-env';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/location-answer.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/button\";\nexport let FindPostcodeComponent = /*#__PURE__*/(() => {\n  class FindPostcodeComponent {\n    constructor(locationAnswersService) {\n      this.locationAnswersService = locationAnswersService;\n      this.nextQuestion = new EventEmitter();\n      this.getLocSub = new Subscription();\n      this.postcodeFormControl = new FormControl('', [Validators.required]);\n    }\n\n    ngOnInit() {}\n\n    saveForm() {\n      return __awaiter(this, void 0, void 0, function* () {\n        //This is in case someone enters a postcode then decides to enter another postcode- to make sure the page is reset\n        document.getElementById('doneLoading').innerHTML = \"\";\n        document.getElementById('nextButton').classList.add('hiddenElem');\n        document.getElementById('loading').classList.add('hiddenElem');\n\n        if (this.postcodeFormControl.value == \"\") {\n          //If response is empty, create 'postcode required' err\n          document.getElementById('errMessageForm').innerHTML = \"Postcode required.\";\n          return;\n        } //search the ordnance survey databas to find information about the opstcode submitted\n        //limiting the response to 1 so we only get exact results\n\n\n        axios.get('https://api.os.uk/search/names/v1/find?maxresults=1&query=' + this.postcodeFormControl.value + '&key=' + osApiEnvironment.OS_API_KEY).then(response => {\n          if (response.data.results[0].GAZETTEER_ENTRY.ID.toUpperCase() === this.postcodeFormControl.value.replace(/\\s/g, \"\").toUpperCase()) {\n            document.getElementById('errMessageForm').innerHTML = \"\";\n            this.locationAnswersService.addAnswerSet(response.data.results[0].GAZETTEER_ENTRY.GEOMETRY_X, response.data.results[0].GAZETTEER_ENTRY.GEOMETRY_Y); //Show loading message\n\n            document.getElementById('loading').classList.remove('hiddenElem'); //call the location answer service so we know when it is done loading\n\n            this.getLocSub = this.locationAnswersService.getAnswerUpdateListener().subscribe(retrievedLocation => {\n              //If we have found hardiness, hide loading form,  show hardiness, show next button\n              document.getElementById('loading').classList.add('hiddenElem');\n              document.getElementById('doneLoading').innerHTML = \"Your hardiness zone is \" + retrievedLocation.hardiness + \".\";\n              document.getElementById('nextButton').classList.remove('hiddenElem');\n            });\n          } else {\n            //If is in a valid postcode format but the address cannot be found, throw unfound postcode err\n            document.getElementById('errMessageForm').innerHTML = \"Cannot find your postcode.\";\n          }\n        }) //********** Try using error codes to finesse this response **********\n        .catch(error => {\n          //If the API throws an err because entry is not a valid postcode format, throw invalid postcode err\n          document.getElementById('errMessageForm').innerHTML = \"Invalid postcode.\";\n        });\n      });\n    }\n\n    getNextQuestion() {\n      //Notify that we are ready to see the next question\n      this.nextQuestion.emit();\n    } //This is called whenever this component is about to be removed from the DOM\n\n\n    ngOnDestroy() {\n      //By calling our subscription at this point and unsubscribing, we are preventing memory leaks\n      this.getLocSub.unsubscribe();\n    }\n\n  }\n\n  FindPostcodeComponent.ɵfac = function FindPostcodeComponent_Factory(t) {\n    return new (t || FindPostcodeComponent)(i0.ɵɵdirectiveInject(i1.LocationAnswers));\n  };\n\n  FindPostcodeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FindPostcodeComponent,\n    selectors: [[\"app-find-postcode\"]],\n    hostBindings: function FindPostcodeComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"unloaded\", function FindPostcodeComponent_unloaded_HostBindingHandler() {\n          return ctx.ngOnDestroy();\n        });\n      }\n    },\n    outputs: {\n      nextQuestion: \"nextQuestion\"\n    },\n    decls: 23,\n    vars: 1,\n    consts: [[1, \"postcode-question\"], [1, \"question-labels\"], [\"id\", \"multiplechoice-label\"], [\"id\", \"sub-label\"], [1, \"postcode-form\"], [\"appearance\", \"outline\", 1, \"postcode-full-width\"], [\"type\", \"postcode\", \"matInput\", \"\", \"placeholder\", \"Ex. SW57NL\", 3, \"formControl\"], [\"id\", \"errMessageForm\", 1, \"errStandin\"], [\"mat-stroked-button\", \"\", \"color\", \"primary\", 1, \"findButton\", 3, \"click\"], [\"id\", \"loading\", 1, \"hiddenElem\"], [\"id\", \"doneLoading\"], [\"mat-stroked-button\", \"\", \"id\", \"nextButton\", \"color\", \"primary\", 1, \"hiddenElem\", 3, \"click\"]],\n    template: function FindPostcodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"label\", 2);\n        i0.ɵɵtext(3, \"Please enter the approximate postcode of the garden for which you need advice.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵelementStart(5, \"label\", 3);\n        i0.ɵɵtext(6, \"We will use your postcode to work out how cold your area gets, so that we can see which plants will be able to survive in your garden. We will also use it to let you know if anyone in your local area is taking steps to help wildlife which you can support.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"form\", 4);\n        i0.ɵɵelementStart(8, \"mat-form-field\", 5);\n        i0.ɵɵelementStart(9, \"mat-label\");\n        i0.ɵɵtext(10, \"Postcode\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementStart(12, \"mat-hint\");\n        i0.ɵɵelement(13, \"strong\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function FindPostcodeComponent_Template_button_click_14_listener() {\n          return ctx.saveForm();\n        });\n        i0.ɵɵtext(15, \"Find Postcode\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"p\", 9);\n        i0.ɵɵtext(17, \"Finding your hardiness zone ...\");\n        i0.ɵɵelement(18, \"br\");\n        i0.ɵɵtext(19, \"You will be able to answer the next question as soon as the hardiness zone of your garden has been found. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"p\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function FindPostcodeComponent_Template_button_click_21_listener() {\n          return ctx.getNextQuestion();\n        });\n        i0.ɵɵtext(22, \"Next\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"formControl\", ctx.postcodeFormControl);\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm, i3.MatFormField, i3.MatLabel, i4.MatInput, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlDirective, i3.MatHint, i5.MatButton],\n    styles: [\".hiddenElem[_ngcontent-%COMP%]{display:none}.postcode-form[_ngcontent-%COMP%]{min-width:150px;max-width:500px;width:100%}.postcode-full-width[_ngcontent-%COMP%]{width:100%}.errStandin[_ngcontent-%COMP%]{color:#a10000}.postcode-question[_ngcontent-%COMP%]{font-size:17px;min-height:350px;padding-left:40px;padding-top:30px;padding-right:40px}.findButton[_ngcontent-%COMP%]{height:43px;width:134px;margin-top:5px}#nextButton[_ngcontent-%COMP%]{height:43px;width:73px;margin-bottom:20px;margin-left:40px}#multiplechoice-label[_ngcontent-%COMP%]{font-size:19px}#sub-label[_ngcontent-%COMP%]{font-size:15px;color:#295e20}.question-labels[_ngcontent-%COMP%]{margin-bottom:1.3rem}#loading[_ngcontent-%COMP%], #doneLoading[_ngcontent-%COMP%]{margin:10px}@media screen and (max-width: 600px){.postcode-question[_ngcontent-%COMP%]{padding-left:30px;padding-top:20px;padding-right:30px;min-height:400px}button[_ngcontent-%COMP%]{margin-left:30px}}\"]\n  });\n  return FindPostcodeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}