{"ast":null,"code":"import axios from 'axios';\nimport { Subject, Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; //***** the service stucture we're using isn't entirely logical- it's not logical for instance that find-postcode\n//calls the OS api and this calls the hardiness API- if there's time, it may be worth refactoring into a more\n//considered model. For now, we're just going with an approach that works.\n//For instance, some of our components could probably call an api themselves rather than being passed it through a service file\n\nexport let LocationAnswers = /*#__PURE__*/(() => {\n  class LocationAnswers {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.updatedLocation = new Subject();\n      this.answersSub = new Subscription();\n    }\n\n    getAnswerUpdateListener() {\n      return this.updatedLocation.asObservable();\n    }\n\n    addAnswerSet(xAnswer, yAnswer) {\n      //This fetches the hardiness data from our api\n      this.answersSub = this.httpClient.get(\"http://localhost:3000/api/minTempData?x=\" + xAnswer + \"&y=\" + yAnswer).subscribe(response => {\n        //THINK ABOUT THE ERROR CONDITION FOR THIS ************\n        //convert BNG to longtiude/latitude\n        axios.get('https://api.getthedata.com/bng2latlong/' + xAnswer + '/' + yAnswer).then(longLatresponse => {\n          console.log(response);\n          console.log(xAnswer);\n          console.log(yAnswer);\n          const longitude = longLatresponse.data.longitude;\n          const latitude = longLatresponse.data.latitude; //this service just fetches our hardiness\n\n          const ourLocation = {\n            x: xAnswer,\n            y: yAnswer,\n            longitude: longitude,\n            latitude: latitude,\n            hardiness: response[0].hardiness\n          };\n          this.updatedLocation.next(ourLocation);\n        }, err => {\n          console.log(err);\n        });\n      }, err => {\n        console.log(err);\n      });\n    } //This is called whenever this component is about to be removed from the DOM\n\n\n    ngOnDestroy() {\n      //By calling our subscription at this point and unsubscribing, we are preventing memory leaks\n      this.answersSub.unsubscribe();\n    }\n\n  }\n\n  LocationAnswers.ɵfac = function LocationAnswers_Factory(t) {\n    return new (t || LocationAnswers)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  LocationAnswers.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocationAnswers,\n    factory: LocationAnswers.ɵfac,\n    providedIn: 'root'\n  });\n  return LocationAnswers;\n})();","map":null,"metadata":{},"sourceType":"module"}