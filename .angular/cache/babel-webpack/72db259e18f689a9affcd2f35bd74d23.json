{"ast":null,"code":"import { Subject, Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./all-answers.service\";\nexport let InfoService = /*#__PURE__*/(() => {\n  class InfoService {\n    constructor(httpClient, allAnswersService) {\n      this.httpClient = httpClient;\n      this.allAnswersService = allAnswersService;\n      this.updatedInfo = new Subject(); //Subscriptions to wildlife answers data\n\n      this.answersSub = new Subscription();\n      this.infoSub = new Subscription(); //here we are subscribing to the listener\n\n      this.answersSub = this.allAnswersService.getAnswerUpdateListener().subscribe(retrievedAnswers => {\n        const ourGardenSize = retrievedAnswers.gardenSize; //Then use that data to filter API data for display\n\n        this.infoSub = this.httpClient.get(\"http://localhost:3000/api/infoData?SizeQueryType=\" + ourGardenSize + \"&Size=Y\").subscribe(response => {\n          this.updatedInfo.next(response);\n        }, err => {\n          console.log(err);\n        });\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    getAnswerUpdateListener() {\n      return this.updatedInfo.asObservable();\n    } //This is called whenever this component is about to be removed from the DOM\n\n\n    ngOnDestroy() {\n      //By calling our subscription at this point and unsubscribing, we are preventing memory leaks\n      this.answersSub.unsubscribe();\n      this.infoSub.unsubscribe();\n    }\n\n  }\n\n  InfoService.ɵfac = function InfoService_Factory(t) {\n    return new (t || InfoService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AllAnswers));\n  };\n\n  InfoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InfoService,\n    factory: InfoService.ɵfac,\n    providedIn: 'root'\n  });\n  return InfoService;\n})();","map":null,"metadata":{},"sourceType":"module"}