{"ast":null,"code":"import { Subject, Subscription } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./all-answers.service\"; //Check this is right?\n\nexport let WildlifeResponse = /*#__PURE__*/(() => {\n  class WildlifeResponse {\n    constructor(httpClient, allAnswersService) {\n      this.httpClient = httpClient;\n      this.allAnswersService = allAnswersService; //Subscriptions to wildlife answers data\n\n      this.answersSub = new Subscription();\n      this.pollinatorSub = new Subscription(); //These variables are set so that we can query our api and filter data according to users' specifications\n\n      this.reqSoilQueryType = \"\";\n      this.reqPHQueryType = \"\";\n      this.reqShadeQueryType = \"\";\n      this.reqHardinessQueryType = \"\"; //Our final 2d data array\n\n      this.allMonthsUsed = new Array(8);\n      this.counter = 0; //This provides info corresponding to allMonthsUsed for each month\n\n      this.infoArr = [{\n        Title: \"March\",\n        Month: \"FloweringMarch\"\n      }, {\n        Title: \"April\",\n        Month: \"FloweringApril\"\n      }, {\n        Title: \"May\",\n        Month: \"FloweringMay\"\n      }, {\n        Title: \"June\",\n        Month: \"FloweringJune\"\n      }, {\n        Title: \"July\",\n        Month: \"FloweringJuly\"\n      }, {\n        Title: \"August\",\n        Month: \"FloweringAugust\"\n      }, {\n        Title: \"September\",\n        Month: \"FloweringSept\"\n      }, {\n        Title: \"October\",\n        Month: \"FloweringOct\"\n      }]; //Our listener objects\n\n      this.updatedMonthsUsed = new Subject(); //here we are subscribing to the listener\n\n      this.answersSub = this.allAnswersService.getAnswerUpdateListener().subscribe(retrievedAnswers => {\n        this.assignUserAnswers(retrievedAnswers);\n        this.getGridData();\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    getMonthsUsedListener() {\n      return this.updatedMonthsUsed.asObservable();\n    }\n\n    assignUserAnswers(retrievedAnswers) {\n      this.reqSoilQueryType = retrievedAnswers.soil;\n      this.reqPHQueryType = retrievedAnswers.ph;\n      this.reqShadeQueryType = retrievedAnswers.shade; //The format of the query is \"Hardiness1\", \"Hardiness2\" etc, but retrievedAnswers.hardiness is just the number part\n\n      this.reqHardinessQueryType = \"Hardiness\" + retrievedAnswers.hardiness;\n    }\n\n    getGridData() {\n      //get API string\n      const REST_API_SERVER = this.getAPI(this.infoArr[this.counter].Month); //Then use that data to filter API data for display\n\n      this.pollinatorSub = this.httpClient.get(REST_API_SERVER).subscribe(response => {\n        let allDataThisMonth = response;\n        this.allMonthsUsed[this.counter] = this.populateMonth(allDataThisMonth, this.infoArr[this.counter].Title); //Using recursion to loop through all 8 months\n\n        if (this.counter == 7) {\n          this.createSubObjects();\n          return;\n        } else {\n          this.counter++;\n          this.getGridData();\n        }\n      }, err => {\n        console.log(err);\n      });\n    }\n\n    populateMonth(allDataThisMonth, monthTitle) {\n      //Create a new month array for new cell of allMonthsUsed (i.e, create data array for the new month)\n      const monthData = []; //Every plant we can find associated with this month is added to this month's array\n\n      for (let j = 0; j < allDataThisMonth.length; j++) {\n        //Creating a new blank grid response\n        //This is done in a quirky way because I had a battle to get it to work\n        //It might be worth trying to reimplement this if there is time *************************\n        monthData[j] = {\n          \"Title\": monthTitle,\n          \"LatinName\": allDataThisMonth[j].LatinName,\n          \"CommonName\": allDataThisMonth[j].CommonName,\n          \"Hardiness\": this.getHardinessString(allDataThisMonth[j]),\n          \"Soil\": this.getSoilString(allDataThisMonth[j]),\n          \"SoilPH\": this.getPHString(allDataThisMonth[j]),\n          \"Shadiness\": this.getShadinessString(allDataThisMonth[j]),\n          \"Moisture\": this.getMoistureString(allDataThisMonth[j]),\n          \"Habit\": allDataThisMonth[j].Habit,\n          \"Height\": allDataThisMonth[j].Height,\n          \"Growth\": allDataThisMonth[j].Growth,\n          \"Native\": this.getNativeString(allDataThisMonth[j].Native),\n          \"Pathname\": allDataThisMonth[j].Pathname,\n          \"Name\": allDataThisMonth[j].Name,\n          \"Username\": allDataThisMonth[j].Username,\n          \"Copyright\": allDataThisMonth[j].Copyright,\n          \"Link\": allDataThisMonth[j].Link\n        };\n      }\n\n      return monthData;\n    }\n\n    getHardinessString(allDataThisMonth) {\n      if (allDataThisMonth.Hardiness0 == \"Y\") {\n        return \"0 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness1 == \"Y\") {\n        return \"1 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness2 == \"Y\") {\n        return \"2 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness3 == \"Y\") {\n        return \"3 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness4 == \"Y\") {\n        return \"4 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness5 == \"Y\") {\n        return \"5 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness6 == \"Y\") {\n        return \"6 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness7 == \"Y\") {\n        return \"7 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness8 == \"Y\") {\n        return \"8 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness9 == \"Y\") {\n        return \"9 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness10 == \"Y\") {\n        return \"10 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness11 == \"Y\") {\n        return \"11 and above\";\n      }\n\n      if (allDataThisMonth.Hardiness12 == \"Y\") {\n        return \"12 and above\";\n      }\n\n      return \"Unknown\";\n    }\n\n    getSoilString(allDataThisMonth) {\n      let responseString = \"\";\n\n      if (allDataThisMonth.SoilLight == \"Y\") {\n        responseString = responseString + \"Light Soil\";\n      }\n\n      if (allDataThisMonth.SoilMedium == \"Y\") {\n        if (responseString == \"\") {\n          responseString = responseString + \"Medium Soil\";\n        } else {\n          responseString = responseString + \", Medium Soil\";\n        }\n      }\n\n      if (allDataThisMonth.SoilHeavy == \"Y\") {\n        if (responseString == \"\") {\n          responseString = responseString + \"Heavy Clay Soil\";\n        } else {\n          responseString = responseString + \", Heavy Clay Soil\";\n        }\n      }\n\n      return responseString;\n    }\n\n    getPHString(allDataThisMonth) {\n      let responseString = \"\";\n\n      if (allDataThisMonth.PHBasicAlkaline == \"Y\") {\n        responseString = responseString + \"Basic (Alkaline) Soil\";\n      }\n\n      if (allDataThisMonth.PHNeutral == \"Y\") {\n        if (responseString == \"\") {\n          responseString = responseString + \"Neutral Soil\";\n        } else {\n          responseString = responseString + \", Neutral Soil\";\n        }\n      }\n\n      if (allDataThisMonth.PHAcid == \"Y\") {\n        if (responseString == \"\") {\n          responseString = responseString + \"Acid Soil\";\n        } else {\n          responseString = responseString + \", Acid Soil\";\n        }\n      }\n\n      return responseString;\n    }\n\n    getShadinessString(allDataThisMonth) {\n      let responseString = \"\";\n\n      if (allDataThisMonth.ShadeNone == \"Y\") {\n        responseString = responseString + \"No Shade\";\n      }\n\n      if (allDataThisMonth.ShadeSemi == \"Y\") {\n        if (responseString == \"\") {\n          responseString = responseString + \"Medium Shade\";\n        } else {\n          responseString = responseString + \", Medium Shade\";\n        }\n      }\n\n      if (allDataThisMonth.ShadeFull == \"Y\") {\n        if (responseString == \"\") {\n          responseString = responseString + \"Full Shade\";\n        } else {\n          responseString = responseString + \", Full Shade\";\n        }\n      }\n\n      return responseString;\n    }\n\n    getMoistureString(allDataThisMonth) {\n      let responseString = \"\";\n\n      if (allDataThisMonth.MoistureDry == \"Y\") {\n        responseString = responseString + \"Dry Soil\";\n      }\n\n      if (allDataThisMonth.MoistureMoist == \"Y\") {\n        if (responseString == \"\") {\n          responseString = responseString + \"Moist Soil\";\n        } else {\n          responseString = responseString + \", Moist Soil\";\n        }\n      }\n\n      if (allDataThisMonth.MoistureWet == \"Y\") {\n        if (responseString == \"\") {\n          responseString = responseString + \"Wet Soil\";\n        } else {\n          responseString = responseString + \", Wet Soil\";\n        }\n      }\n\n      if (allDataThisMonth.MoistureWater == \"Y\") {\n        if (responseString == \"\") {\n          responseString = responseString + \"Water\";\n        } else {\n          responseString = responseString + \", Water\";\n        }\n      }\n\n      return responseString;\n    }\n\n    getNativeString(nativeLetter) {\n      if (nativeLetter == \"Y\") {\n        return \"Yes\";\n      } else {\n        return \"No\";\n      }\n    }\n\n    getAPI(monthReq) {\n      // Responses are all always set to \"Y\" because we're never testing for something NOT appropriate for a garden (in the the context of what our site does)\n      // Because we are cycling through floweringType queries, it is a local variable not a global one\n      return \"https://rewildmygarden-api.azurewebsites.net/api/minimalTestDataFilter?\" + \"SoilQueryType=\" + this.reqSoilQueryType + \"&Soil=Y\" + \"&ShadeQueryType=\" + this.reqShadeQueryType + \"&Shade=Y\" + \"&PHQueryType=\" + this.reqPHQueryType + \"&PH=Y\" + \"&FloweringQueryType=\" + monthReq + \"&Flowering=Y\" + \"&HardinessQueryType=\" + this.reqHardinessQueryType + \"&Hardiness=Y\";\n    }\n\n    createSubObjects() {\n      //We are now sending our ACTUAL array as opposed to a copy. We do nothing to the data at the other end, so this shouldn't\n      //be a problem, but it's a good idea to take note of this ! Creating a duplicate of a multidimensional array would require an\n      //explicit copy of each cell\n      this.updatedMonthsUsed.next(this.allMonthsUsed);\n    }\n\n    ngOnInit() {}\n\n    ngOnDestroy() {\n      //By calling our subscription at this point and unsubscribing, we are preventing memory leaks\n      this.answersSub.unsubscribe();\n      this.pollinatorSub.unsubscribe();\n    }\n\n  }\n\n  WildlifeResponse.ɵfac = function WildlifeResponse_Factory(t) {\n    return new (t || WildlifeResponse)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AllAnswers));\n  };\n\n  WildlifeResponse.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WildlifeResponse,\n    factory: WildlifeResponse.ɵfac,\n    providedIn: \"root\"\n  });\n  return WildlifeResponse;\n})();","map":null,"metadata":{},"sourceType":"module"}